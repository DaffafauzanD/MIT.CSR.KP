//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using MIT.ECSR.Shared.Attributes;
using MIT.ECSR.Core.Status.Query;
using MIT.ECSR.Core.Request;
using MIT.ECSR.Core.Status.Command;

namespace MIT.ECSR.API.Controllers
{
    public partial class StatusController : BaseController<StatusController>
    {
        [HttpGet(template: "get/{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            return Wrapper(await _mediator.Send(new GetStatusByIdRequest() { Id = id }));
        }

        [HttpPost(template: "list")]
        public async Task<IActionResult> List([FromBody] ListRequest request)
        {
            var list_request = _mapper.Map<GetStatusListRequest>(request);
            return Wrapper(await _mediator.Send(list_request));
        }

        [HttpPost(template: "add")]
        public async Task<IActionResult> Add([FromBody] StatusRequest request)
        {
            var add_request = _mapper.Map<AddStatusRequest>(request);
            add_request.Inputer = Inputer;
            return Wrapper(await _mediator.Send(add_request));
        }

        [HttpPut(template: "edit/{id}")]
        public async Task<IActionResult> Edit(int id, [FromBody] StatusRequest request)
        {
            var edit_request = _mapper.Map<EditStatusRequest>(request);
            edit_request.Id = id;
            edit_request.Inputer = Inputer;
            return Wrapper(await _mediator.Send(edit_request));
        }

        [HttpDelete(template: "delete/{id}")]
        public async Task<IActionResult> Delete(int id)
        {
            return Wrapper(await _mediator.Send(new DeleteStatusRequest() { Id = id, Inputer = Inputer }));
        }

        
        [HttpPut(template: "active/{id}/{value}")]
        public async Task<IActionResult> Active(int id, bool value)
        {
            return Wrapper(await _mediator.Send(new ActiveStatusRequest() { Id = id, Active = value, Inputer = Inputer }));
        }
        
    }
}

