//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using WonderKid.DAL.Interface;
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;
using Microsoft.Extensions.Logging;
using MIT.ECSR.Data;
using MIT.ECSR.Data.Model;
using MIT.ECSR.Shared.Attributes;
using MIT.ECSR.Core.Response;
using MIT.ECSR.Core.Helper;
using System.ComponentModel.DataAnnotations;

namespace MIT.ECSR.Core.Monitoring.Query
{
    public class GetProgramItemListRequest : IRequest<ListResponse<ProgramItemResponse>>
    {
		[Required]
		public Guid IdProgram { get; set; }
    }
    internal class GetProgramItemListHandler : IRequestHandler<GetProgramItemListRequest, ListResponse<ProgramItemResponse>>
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public GetProgramItemListHandler(
            ILogger<GetProgramItemListHandler> logger,
            IMapper mapper,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mapper = mapper;
            _context = context;
        }

        public async Task<ListResponse<ProgramItemResponse>> Handle(GetProgramItemListRequest request, CancellationToken cancellationToken)
        {
            ListResponse<ProgramItemResponse> result = new ListResponse<ProgramItemResponse>();
            try
            {
				var data_list = await _context.Entity<TrsProgramItem>()
					.Where(d=>d.IdProgram == request.IdProgram)
					.Include(d=>d.IdSatuanJenisNavigation)
					.Include(d=>d.TrsProgresProgram)
					.ToListAsync();

				result.List = _mapper.Map<List<ProgramItemResponse>>(data_list);
				result.Filtered = data_list.Count();
				result.Count = data_list.Count();
                result.OK();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Get List Program Item", request);
                result.Error("Failed Get List Program Item", ex.Message);
            }
            return result;
        }

        #region List Utility
		private (Expression<Func<MIT.ECSR.Data.Model.RefSatuanJenis, bool>> where, Expression<Func<MIT.ECSR.Data.Model.RefSatuanJenis, object>> order) ListExpression(string search, string field, bool is_where)
		{
			Expression<Func<MIT.ECSR.Data.Model.RefSatuanJenis, object>> result_order = null;
			Expression<Func<MIT.ECSR.Data.Model.RefSatuanJenis, bool>> result_where = null;
            if (!string.IsNullOrWhiteSpace(search) && !string.IsNullOrWhiteSpace(field))
            {
                field = field.Trim().ToLower();
                search = search.Trim().ToLower();
                switch (field)
                {
					case "id" : 
						if(is_where){
							if (int.TryParse(search, out var _Id))
								result_where = (d=>d.Id == _Id);
						}
						else
							result_order = (d => d.Id);
					break;
					case "active" : 
						if(is_where){
							if (bool.TryParse(search, out var _Active))
								result_where = (d=>d.Active == _Active);
						}
						else
							result_order = (d => d.Active);
					break;
					case "createby" : 
						if(is_where){
							result_where = (d=>d.CreateBy.Trim().ToLower().Contains(search));
						}
						else
							result_order = (d => d.CreateBy);
					break;
					case "createdate" : 
						if(is_where){
							if (DateTime.TryParse(search, out var _CreateDate))
								result_where = (d=>d.CreateDate == _CreateDate);
						}
						else
							result_order = (d => d.CreateDate);
					break;
					case "kode" : 
						if(is_where){
							result_where = (d=>d.Kode.Trim().ToLower().Contains(search));
						}
						else
							result_order = (d => d.Kode);
					break;
					case "name" : 
						if(is_where){
							result_where = (d=>d.Name.Trim().ToLower().Contains(search));
						}
						else
							result_order = (d => d.Name);
					break;
					case "updateby" : 
						if(is_where){
							result_where = (d=>d.UpdateBy.Trim().ToLower().Contains(search));
						}
						else
							result_order = (d => d.UpdateBy);
					break;
					case "updatedate" : 
						if(is_where){
							if (DateTime.TryParse(search, out var _UpdateDate))
								result_where = (d=>d.UpdateDate == _UpdateDate);
						}
						else
							result_order = (d => d.UpdateDate);
					break;

                }
            }
            return (result_where, result_order);
        }
        #endregion
    }
}

