//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using WonderKid.DAL.Interface;
using System.ComponentModel.DataAnnotations;
using Microsoft.Extensions.Logging;
using MIT.ECSR.Data;
using MIT.ECSR.Shared.Attributes;
using MIT.ECSR.Core.Helper;
using MIT.ECSR.Core.Request;
using MIT.ECSR.Data.Model;
using Microsoft.EntityFrameworkCore;

namespace MIT.ECSR.Core.Monitoring.Command
{

    #region Request
    public class UpdateProgressMapping : Profile
    {
        public UpdateProgressMapping()
        {
            CreateMap<UpdateProgressRequest, ProgressRequest>().ReverseMap();
        }
    }
    public class UpdateProgressRequest : ProgressRequest,IRequest<StatusResponse>
    {
        [Required]
        public string Inputer { get; set; }
    }
    #endregion

    internal class UpdateProgressHandler : IRequestHandler<UpdateProgressRequest, StatusResponse>
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public UpdateProgressHandler(
            ILogger<UpdateProgressHandler> logger,
            IMapper mapper,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mapper = mapper;
            _context = context;
        }
        public async Task<StatusResponse> Handle(UpdateProgressRequest request, CancellationToken cancellationToken)
        {
            StatusResponse result = new StatusResponse();
            try
            {
                var item = await _context.Entity<TrsProgramItem>().Include(d=>d.IdProgramNavigation).Where(d => d.Id == request.IdProgramItem).FirstOrDefaultAsync();
                if(item == null)
                {
                    result.BadRequest("Program Item Id Not Found!");
                    return result;
                }
                if (item.IdProgramNavigation.Status != (int)ProgramStatusEnum.ON_PROGRESS)
                {
                    result.BadRequest($"Cannot be update progress because status {item.IdProgramNavigation.Status}");
                    return result;
                }
                var last_progress = await _context.Entity<TrsProgresProgram>().Where(d => d.IdProgramItem == request.IdProgramItem).Select(d=>d.Progress).OrderByDescending(d=>d).FirstOrDefaultAsync();
                if(last_progress>=100)
                {
                    result.BadRequest($"Cannot be update progress because progress is {last_progress}");
                    return result;
                }
                if(request.Progress<last_progress)
                {
                    result.BadRequest($"Cannot be update progress lower than {last_progress}");
                    return result;
                }
                var progress = new TrsProgresProgram()
                {
                    CreateBy = request.Inputer,
                    CreateDate= DateTime.Now,
                    Deskripsi = request.Deskripsi,
                    Id = Guid.NewGuid(),
                    IdProgramItem = request.IdProgramItem,
                    Progress = request.Progress
                };
                _context.Add(progress);
                List<FileObjectPath> file_lampiran = null;
                if (request.Media!=null && request.Media.Count>0)
                {
                    file_lampiran = new List<FileObjectPath>();
                    foreach (var d in request.Media)
                    {
                        var id_media = Guid.NewGuid();
                        file_lampiran.Add(new FileObjectPath()
                        {
                            Base64 = d.Base64,
                            Filename = d.Filename,
                            FilePath = Path.Combine(ConstantApplication.MediaPath, id_media.ToString())
                        });

                        _context.Add(new TrsMedia()
                        {
                            CreateDate = DateTime.Now,
                            CreateBy = request.Inputer,

                            Id = id_media,
                            Modul = progress.Id.ToString(),
                            FileName = d.Filename,
                            Extension = Path.GetExtension(d.Filename)
                        });
                        _context.Add(new TrsProgresProgramMedia()
                        {
                            CreateDate = DateTime.Now,
                            CreateBy = request.Inputer,

                            Id = Guid.NewGuid(),
                            IdMedia = id_media,
                            IdProgresProgram = progress.Id
                        });
                    }
                }

                var save = await _context.Commit();
                if (save.Success)
                {
                    //save file
                    if (file_lampiran != null)
                    {
                        foreach (var d in file_lampiran)
                        {
                            File.WriteAllBytes(d.FilePath, Convert.FromBase64String(d.Base64));
                        }
                    }
                    result.OK();
                }
                else
                    result.BadRequest(save.Message);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Add ProgramItem", request);
                result.Error("Failed Add ProgramItem", ex.Message);
            }
            return result;
        }
    }
}

