//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using WonderKid.DAL.Interface;
using System.ComponentModel.DataAnnotations;
using Microsoft.Extensions.Logging;
using MIT.ECSR.Data;
using MIT.ECSR.Shared.Attributes;
using MIT.ECSR.Core.Helper;
using MIT.ECSR.Core.Request;
using MIT.ECSR.Data.Model;
using Microsoft.EntityFrameworkCore;
using MIT.ECSR.Core.Media.Command;

namespace MIT.ECSR.Core.ProgresProgram.Command
{

    #region Request
    public class AddProgresProgramMapping : Profile
    {
        public AddProgresProgramMapping()
        {
            CreateMap<AddProgresProgramRequest, ProgresProgramRequest>().ReverseMap();
        }
    }
    public class AddProgresProgramRequest : ProgresProgramRequest, IMapRequest<MIT.ECSR.Data.Model.TrsProgresProgram, AddProgresProgramRequest>, IRequest<StatusResponse>
    {
        [Required]
        public Guid IdPerusahaan { get; set; }
        [Required]
        public string Inputer { get; set; }
        public void Mapping(IMappingExpression<AddProgresProgramRequest, MIT.ECSR.Data.Model.TrsProgresProgram> map)
        {
        }
    }
    #endregion

    internal class AddProgresProgramHandler : IRequestHandler<AddProgresProgramRequest, StatusResponse>
    {
        private readonly ILogger _logger;
        private readonly IMediator _mediator;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public AddProgresProgramHandler(
            ILogger<AddProgresProgramHandler> logger,
            IMediator mediator,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mediator = mediator;
            _context = context;
        }
        public async Task<StatusResponse> Handle(AddProgresProgramRequest request, CancellationToken cancellationToken)
        {
            StatusResponse result = new StatusResponse();
            try
            {
                var item = await _context.Entity<TrsProgramItem>().Where(d => d.Id == request.IdProgramItem).Include(d => d.TrsProgresProgram).FirstOrDefaultAsync();
                if (item == null)
                {
                    result.NotFound();
                    return result;
                }

                if (request.Progress == 100)
                {
                    if (request.Lampiran == null || request.Lampiran.Count < 1)
                    {
                        result.BadRequest($"Harap upload lampiran BAST");
                        return result;
                    }
                }

                var progressApproved = item.TrsProgresProgram.Where(d => d.Status == (int)ProgressStatusEnum.APPROVE && d.IdPerusahaan == request.IdPerusahaan);
                if (progressApproved.Count() > 0)
                {
                    var last_progress = progressApproved.Max(d => d.Progress);
                    if (last_progress > request.Progress)
                    {
                        result.BadRequest($"Tidak dapat melakukan Update Progress kurang dari {last_progress}%");
                        return result;
                    }
                }

                (bool Success, string Message, Exception? ex) saveResult = (false, string.Empty, null); 
                var progressProgram = item.TrsProgresProgram.Where(x => x.IdPerusahaan == request.IdPerusahaan).OrderByDescending(x => x.Status).FirstOrDefault();
                if (progressProgram != null && progressProgram.Status != (int)ProgressStatusEnum.REJECT)
                {
                    if (progressProgram.Status == (int)ProgressStatusEnum.APPROVE)
                    {
                        result.BadRequest($"Tidak dapat melakukan Update Progress yang sudah approved.");
                        return result;
                    }

                    progressProgram.Deskripsi = request.Deskripsi;
                    progressProgram.Progress = request.Progress;
                    progressProgram.TglProgress = request.TglProgress;
                    progressProgram.CreateBy = request.Inputer;
                    progressProgram.CreateDate = DateTime.Now;
                    progressProgram.Status = (int)ProgressStatusEnum.DRAFT;
                    saveResult = await _context.UpdateSave(progressProgram);
                }
                else
                {
                    progressProgram = new TrsProgresProgram()
                    {
                        IdPerusahaan = request.IdPerusahaan,
                        CreateBy = request.Inputer,
                        CreateDate = DateTime.Now,
                        Id = Guid.NewGuid(),
                        Deskripsi = request.Deskripsi,
                        IdProgramItem = request.IdProgramItem,
                        Progress = request.Progress,
                        Status = (int)ProgressStatusEnum.DRAFT,
                        TglProgress = request.TglProgress
                    };
                    saveResult = await _context.AddSave(progressProgram);
                }

               
                if (saveResult.Success)
                {
                    result.OK();
                    if (request.Lampiran != null)
                    {
                        foreach (var d in request.Lampiran)
                        {
                            result = await _mediator.Send(new UploadMediaRequest()
                            {
                                File = d,
                                Inputer = request.Inputer,
                                Modul = progressProgram.Id.ToString(),
                                Tipe = "PROGRESS",
                            });
                        }
                    }
                }
                else
                    result.BadRequest(saveResult.Message);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Add ProgresProgram", request);
                result.Error("Failed Add ProgresProgram", ex.Message);
            }
            return result;
        }
    }
}

