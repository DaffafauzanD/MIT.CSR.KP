//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using WonderKid.DAL.Interface;
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;
using Microsoft.Extensions.Logging;
using MIT.ECSR.Data;
using MIT.ECSR.Data.Model;
using MIT.ECSR.Shared.Attributes;
using MIT.ECSR.Core.Response;
using MIT.ECSR.Core.Helper;
using MIT.ECSR.Core.Media.Query;
using System.Globalization;
using HandlebarsDotNet;

namespace MIT.ECSR.Core.ProgresProgram.Query
{
    public class GetProgresProgramListExternalRequest : IRequest<ListResponse<ProgresProgramExternalResponse>>
    {
        public Guid IdPerusahaan { get; set; }
        public int Start { get; set; }
        public int Length { get; set; }
    }
    internal class GetProgresProgramListExternalHandler : IRequestHandler<GetProgresProgramListExternalRequest, ListResponse<ProgresProgramExternalResponse>>
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
        private readonly IMediator _mediator;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public GetProgresProgramListExternalHandler(
            ILogger<GetProgresProgramListExternalHandler> logger,
            IMapper mapper,
            IMediator mediator,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mapper = mapper;
            _mediator = mediator;
            _context = context;
        }

        public async Task<ListResponse<ProgresProgramExternalResponse>> Handle(GetProgresProgramListExternalRequest request, CancellationToken cancellationToken)
        {
            ListResponse<ProgresProgramExternalResponse> result = new ListResponse<ProgresProgramExternalResponse>();
            try
            {
                var groupingData = await _context.Entity<MIT.ECSR.Data.Model.TrsPenawaranItem>()
                            .Where(d => d.Status == (int)PenawaranStatusEnum.SUBMIT && d.IdPenawaranNavigation.IdPerusahaan == request.IdPerusahaan)
                            .GroupBy(d => d.IdProgramItemNavigation.IdProgram)
                            .Select(d => new { 
                                IdProgram = d.Key,
                                IdItemProgram = d.Select(z => z.IdProgramItem)
                            })
                            .ToListAsync();

                var ids_program = groupingData.Select(z => z.IdProgram);
                var ids_program_item = groupingData.Select(x => x.IdItemProgram).SelectMany(x => x);
                result.Count = ids_program.Count();
                if (ids_program.Count() > 0)
                {
                    var data_list = await _context.Entity<TrsProgramItem>().Where(d => ids_program.Contains(d.IdProgram) && ids_program_item.Contains(d.Id))
                                    .Include(d => d.IdProgramNavigation)
                                    .ThenInclude(d => d.IdJenisProgramNavigation)
                                    .Include(d => d.IdProgramNavigation)
                                    .ThenInclude(d => d.NamaProgramNavigation)
                                    .Include(d => d.TrsProgresProgram)
                                    .OrderByDescending(d => d.UpdateDate)
                                    .Skip((request.Start - 1) * request.Length).Take(request.Length)
                                    .ToListAsync();

                    var id_program_items = data_list.Select(d => d.Id).ToList();
                    var list_item = await _context.Entity<TrsPenawaranItem>()
                        .Include(d => d.IdPenawaranNavigation)
                        .Where(d => id_program_items.Contains(d.IdProgramItem) && d.Status == (int)PenawaranStatusEnum.SUBMIT && d.IdPenawaranNavigation.IdPerusahaan == request.IdPerusahaan)
                                .GroupBy(d => d.IdProgramItem)
                                .Select(d => new 
                                { 
                                    Id = d.Key,
                                    Value = d.Sum(e=>e.Jumlah)
                                }).ToListAsync();

                    var photos = await _mediator.Send(new GetMediaUrlListRequest() { Modul = ids_program.Select(d => d.ToString()).ToList(), Tipe = "PHOTO_PROGRAM" });
                    result.List = new List<ProgresProgramExternalResponse>();
                    foreach (var id in ids_program)
                    {
                        var data = data_list.Where(d => d.IdProgram == id).FirstOrDefault();

                        if (data != null)
                        {
                            var obj = new ProgresProgramExternalResponse()
                            {
                                Deskripsi = data.IdProgramNavigation.Deskripsi,
                                EndProgramKerja = data.IdProgramNavigation.EndProgramKerja,
                                EndTglPelaksanaan = data.IdProgramNavigation.EndTglPelaksanaan,
                                StartTglPelaksanaan = data.IdProgramNavigation.StartTglPelaksanaan,
                                Id = id,
                                Lokasi = data.IdProgramNavigation.Lokasi,
                                NamaProgram = data.IdProgramNavigation.NamaProgramNavigation.Name,
                                JenisProgram = new ReferensiObject()
                                {
                                    Id = data.IdProgramNavigation.IdJenisProgram,
                                    Nama = data.IdProgramNavigation.IdJenisProgramNavigation.Name
                                },
                                Items = data_list.Where(d => d.IdProgram == id).Select(d => new ProgressProgramExternalItemObject()
                                {
                                    Id = d.Id,
                                    Jumlah = list_item.Where(x => x.Id == d.Id).Select(x => x.Value).FirstOrDefault(),
                                    Kegiatan = d.Nama,
                                    LastProgress = d.UpdateDate,
                                    LastProgressBy = d.UpdateBy,
                                    Progress = d.Progress.HasValue ? d.Progress.Value : 0,
                                    Total = d.Jumlah,
                                    Detail = new ProgressDetailProgramExternalItemObject
                                    {
                                        Id = d.TrsProgresProgram.Where(z => z.IdPerusahaan == request.IdPerusahaan).OrderByDescending(z => z.Progress).FirstOrDefault()?.Id,
                                        Deskripsi = d.TrsProgresProgram.Where(z => z.IdPerusahaan == request.IdPerusahaan).OrderByDescending(z => z.Progress).FirstOrDefault()?.Deskripsi,
                                        Progress = d.TrsProgresProgram.Where(z => z.IdPerusahaan == request.IdPerusahaan).OrderByDescending(z => z.Progress).FirstOrDefault()?.Progress,
                                        TglProgress = d.TrsProgresProgram.Where(z => z.IdPerusahaan == request.IdPerusahaan).OrderByDescending(z => z.Progress).FirstOrDefault()?.TglProgress,
                                        Lampiran = d.TrsProgresProgram.Where(z => z.IdPerusahaan == request.IdPerusahaan).OrderByDescending(z => z.Progress).FirstOrDefault() != null ? _mediator.Send(new GetMediaUrlListRequest() { Modul = new List<string> { d.TrsProgresProgram.Where(z => z.IdPerusahaan == request.IdPerusahaan).OrderByDescending(z => z.Progress).FirstOrDefault().Id.ToString() }, Tipe = "PROGRESS" }).GetAwaiter().GetResult()?.List?.Select(d => d.Media)?.ToList() : default
                                    }
                                }).ToList(),
                                Photo = photos.Succeeded ? photos.List.Where(x => x.Modul == id.ToString()).Select(d => d.Media).FirstOrDefault() : null
                            };
                            result.List.Add(obj);
                        }
                    }
                    result.Filtered = result.List.Count();
                }
                result.OK();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Get List ProgresProgram", request);
                result.Error("Failed Get List ProgresProgram", ex.Message);
            }
            return result;
        }
    }
}

