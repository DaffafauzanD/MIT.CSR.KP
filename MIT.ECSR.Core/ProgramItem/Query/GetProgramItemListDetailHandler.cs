//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using WonderKid.DAL.Interface;
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;
using Microsoft.Extensions.Logging;
using MIT.ECSR.Data;
using MIT.ECSR.Data.Model;
using MIT.ECSR.Shared.Attributes;
using MIT.ECSR.Core.Response;
using MIT.ECSR.Core.Helper;
using MIT.ECSR.Core.Media.Query;

namespace MIT.ECSR.Core.ProgramItem.Query
{
    public class GetProgramItemListDetailRequest : IRequest<ListResponse<ProgramItemDetailResponse>>
    {
        public Guid IdProgram { get; set; }
        public bool ApproveOnly { get; set; }
        public Guid? IdPerusahaan { get; set; }
    }
    internal class GetProgramItemListDetailHandler : IRequestHandler<GetProgramItemListDetailRequest, ListResponse<ProgramItemDetailResponse>>
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
        private readonly IMediator _mediator;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public GetProgramItemListDetailHandler(
            ILogger<GetProgramItemListDetailHandler> logger,
            IMapper mapper,
            IMediator mediator,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mapper = mapper;
            _mediator = mediator;
            _context = context;
        }

        public async Task<ListResponse<ProgramItemDetailResponse>> Handle(GetProgramItemListDetailRequest request, CancellationToken cancellationToken)
        {
            ListResponse<ProgramItemDetailResponse> result = new ListResponse<ProgramItemDetailResponse>();
            try
            {
                var query = _context.Entity<TrsProgramItem>().Where(d => d.IdProgram == request.IdProgram)
                            .Include(d => d.TrsPenawaranItem)
                            .ThenInclude(d => d.IdPenawaranNavigation)
                            .ThenInclude(d => d.IdPerusahaanNavigation).AsQueryable();

                var data_list = await query.ToListAsync();
                result.List = new List<ProgramItemDetailResponse>();
                if (data_list != null)
                {
                    foreach (var data in data_list)
                    {
                        var obj = _mapper.Map<ProgramItemDetailResponse>(data);
                        var lampiran = await _mediator.Send(new GetMediaUrlRequest() { Modul = data.Id.ToString(), Tipe = "ITEM_PROGRAM" });
                        if (lampiran.Succeeded)
                            obj.Lampiran = lampiran.List;

                        var penawaran = data.TrsPenawaranItem.AsEnumerable();
                        if (request.IdPerusahaan.HasValue)
                            penawaran = penawaran.Where(d => d.IdPenawaranNavigation.IdPerusahaan == request.IdPerusahaan.Value).AsEnumerable();
                        if (request.ApproveOnly)
                            penawaran = penawaran.Where(d => d.Status == (int)PenawaranStatusEnum.SUBMIT).AsEnumerable();

                        var data_penawaran = penawaran.Select(d => new
                        {
                            IdUser = d.IdPenawaranNavigation.IdPerusahaanNavigation.IdUser,
                            IdPerusahaan = d.IdPenawaranNavigation.IdPerusahaan,
                            NamaPerusahaan = d.IdPenawaranNavigation.IdPerusahaanNavigation.NamaPerusahaan,
                            StatusPenawaran = d.Status,
                            Unit = d.Jumlah,
                        }).ToList();

                        if (data_penawaran.Count > 0)
                        {
                            var photos = await _mediator.Send(new GetMediaUrlListRequest() { Modul = data_penawaran.Where(d => d.IdUser.HasValue).Select(d => d.IdUser.Value.ToString()).ToList(), Tipe = "PHOTO_USER" });
                            obj.Penawaran = new List<ProgramPenawaranObject>();
                            foreach (var d in data_penawaran)
                            {
                                var photo = photos.Succeeded ? photos.List.Where(x => x.Modul == d.IdUser.ToString()).Select(d => d.Media).FirstOrDefault() : null;

                                obj.Penawaran.Add(new ProgramPenawaranObject()
                                {
                                    IdPerusahaan = d.IdPerusahaan,
                                    Logo = photo,
                                    NamaPerusahaan = d.NamaPerusahaan,
                                    StatusPenawaran = d.StatusPenawaran,
                                    Unit = d.Unit
                                });
                            }
                        }
                        result.List.Add(obj);
                    }
                    result.Filtered = data_list.Count();
                    result.Count = result.Filtered;
                }

                result.OK();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Get List ProgramItem", request);
                result.Error("Failed Get List ProgramItem", ex.Message);
            }
            return result;
        }


    }
}

