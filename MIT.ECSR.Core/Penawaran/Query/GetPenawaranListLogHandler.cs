//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using WonderKid.DAL.Interface;
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;
using Microsoft.Extensions.Logging;
using MIT.ECSR.Data;
using MIT.ECSR.Data.Model;
using MIT.ECSR.Shared.Attributes;
using MIT.ECSR.Core.Response;
using MIT.ECSR.Core.Helper;
using MIT.ECSR.Core.Media.Query;
using DocumentFormat.OpenXml.Spreadsheet;
using MIT.ECSR.Core.Penawaran.Object;

namespace MIT.ECSR.Core.Penawaran.Query
{
    public class GetPenawaranListLogRequest : PenawaranListRequest, IListRequest<GetPenawaranListLogRequest>, IRequest<ListResponse<PenawaranLogResponse>>
    {
    }
    internal class GetTopCompanyHandler : IRequestHandler<GetPenawaranListLogRequest, ListResponse<PenawaranLogResponse>>
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
        private readonly IMediator _mediator;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public GetTopCompanyHandler(
            ILogger<GetTopCompanyHandler> logger,
            IMapper mapper,
            IMediator mediator,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mapper = mapper;
            _mediator = mediator;
            _context = context;
        }

        public async Task<ListResponse<PenawaranLogResponse>> Handle(GetPenawaranListLogRequest request, CancellationToken cancellationToken)
        {
            ListResponse<PenawaranLogResponse> result = new ListResponse<PenawaranLogResponse>();
            try
            {
                var query = _context.Entity<MIT.ECSR.Data.Model.TrsPenawaranItem>()
                            .Include(d=>d.IdPenawaranNavigation)
                            .ThenInclude(d=>d.IdPerusahaanNavigation)
                            .Include(d=>d.IdProgramItemNavigation)
                            .ThenInclude(d=>d.IdProgramNavigation)
                            .ThenInclude(d=>d.NamaProgramNavigation)
                            .AsQueryable();

                #region Filter
                Expression<Func<MIT.ECSR.Data.Model.TrsPenawaranItem, object>> column_sort = null;
                List<Expression<Func<MIT.ECSR.Data.Model.TrsPenawaranItem, bool>>> where = new List<Expression<Func<MIT.ECSR.Data.Model.TrsPenawaranItem, bool>>>();
                if (request.Filter != null && request.Filter.Count > 0)
                {
                    foreach (var f in request.Filter)
                    {
                        var obj = ListExpression(f.Search, f.Field, true);
                        if (obj.where != null)
                            where.Add(obj.where);
                    }
                }
                if (where != null && where.Count() > 0)
                {
                    foreach (var w in where)
                    {
                        query = query.Where(w);
                    }
                }
                if (request.Sort != null)
                {
                    column_sort = ListExpression(request.Sort.Field, request.Sort.Field, false).order!;
                    if (column_sort != null)
                        query = request.Sort.Type == SortTypeEnum.ASC ? query.OrderBy(column_sort) : query.OrderByDescending(column_sort);
                    else
                        query = query.OrderBy(d => d.Id);
                }
                #endregion

                if (request.IdPerusahaan.HasValue)
                    query = query.Where(x => x.IdPenawaranNavigation.IdPerusahaan == request.IdPerusahaan);

                var query_count = query;
                if (request.Start.HasValue && request.Length.HasValue && request.Length > 0)
                    query = query.Skip((request.Start.Value - 1) * request.Length.Value).Take(request.Length.Value);
                var data_list = await query.ToListAsync();

                if (data_list.Count() > 0)
                {
                    var id_program_item = data_list.Select(d => d.IdProgramItem).ToList();
                    var sisa = await _context.Entity<TrsPenawaranItem>().Where(d => id_program_item.Contains(d.IdProgramItem) && d.Status == (int)PenawaranStatusEnum.SUBMIT)
                                .GroupBy(d => d.IdProgramItem)
                                .Select(d => new
                                {
                                    IdProgramItem = d.Key,
                                    Jumlah = d.Sum(e => e.Jumlah),
                                    Rupiah = d.Sum(e => e.Rupiah)
                                }).ToListAsync();
                    var id_user = data_list.Where(d=> d.IdPenawaranNavigation.IdPerusahaanNavigation.IdUser.HasValue).Select(d => d.IdPenawaranNavigation.IdPerusahaanNavigation.IdUser.Value).ToList();
                    var photos = await _mediator.Send(new GetMediaUrlListRequest() { Modul = id_user.Select(d => d.ToString()).ToList(), Tipe = "PHOTO_USER" });
                    
                    var lampiran_penawaran = await _mediator.Send(new GetMediaUrlListRequest() { Modul = data_list.Select(d => d.IdPenawaran.ToString()).Distinct().ToList(), Tipe = "PENAWARAN_LAMPIRAN" });

                    result.List = new List<PenawaranLogResponse>();
                    foreach (var data in data_list)
                    {
                        var obj = _mapper.Map<PenawaranLogResponse>(data);
                        obj.Sisa = new PenawaranValueObject()
                        {
                            Jumlah = sisa.Where(d => d.IdProgramItem == data.IdProgramItem).Select(d => d.Jumlah).FirstOrDefault(),
                            Rupiah = sisa.Where(d => d.IdProgramItem == data.IdProgramItem).Select(d => d.Rupiah).FirstOrDefault()
                        };
                        var user = data.IdPenawaranNavigation.IdPerusahaanNavigation.IdUser;
                        obj.PerusahaanLogo = photos.Succeeded && user.HasValue ? photos.List.Where(x => x.Modul == user.Value.ToString()).Select(d => d.Media).FirstOrDefault() : null;
                        obj.LampiranPenawaran = lampiran_penawaran.Succeeded ? lampiran_penawaran.List.Where(d => d.Modul == data.IdPenawaran.ToString()).Select(d => d.Media).ToList() : null;
                        
                        result.List.Add(obj);
                    }
                    result.Filtered = data_list.Count();
                }
                result.Count = await query_count.CountAsync();
                result.OK();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Get List PenawaranItem", request);
                result.Error("Failed Get List PenawaranItem", ex.Message);
            }
            return result;
        }

        #region List Utility
        private (Expression<Func<MIT.ECSR.Data.Model.TrsPenawaranItem, bool>> where, Expression<Func<MIT.ECSR.Data.Model.TrsPenawaranItem, object>> order) ListExpression(string search, string field, bool is_where)
        {
            Expression<Func<MIT.ECSR.Data.Model.TrsPenawaranItem, object>> result_order = null;
            Expression<Func<MIT.ECSR.Data.Model.TrsPenawaranItem, bool>> result_where = null;
            if (!string.IsNullOrWhiteSpace(search) && !string.IsNullOrWhiteSpace(field))
            {
                field = field.Trim().ToLower();
                search = search.Trim().ToLower();
                switch (field)
                {
                    case "id":
                        if (is_where)
                        {
                            if (Guid.TryParse(search, out var _Id))
                                result_where = (d => d.Id == _Id);
                        }
                        else
                            result_order = (d => d.Id);
                        break;
                    case "approvedat":
                        if (is_where)
                        {
                            if (DateTime.TryParse(search, out var _ApprovedAt))
                                result_where = (d => d.ApprovedAt == _ApprovedAt);
                        }
                        else
                            result_order = (d => d.ApprovedAt);
                        break;
                    case "approvedby":
                        if (is_where)
                        {
                            result_where = (d => d.ApprovedBy.Trim().ToLower().Contains(search));
                        }
                        else
                            result_order = (d => d.ApprovedBy);
                        break;
                    case "createby":
                        if (is_where)
                        {
                            result_where = (d => d.CreateBy.Trim().ToLower().Contains(search));
                        }
                        else
                            result_order = (d => d.CreateBy);
                        break;
                    case "createdate":
                        if (is_where)
                        {
                            if (DateTime.TryParse(search, out var _CreateDate))
                                result_where = (d => d.CreateDate == _CreateDate);
                        }
                        else
                            result_order = (d => d.CreateDate);
                        break;
                    case "idperusahaan":
                        if (is_where)
                        {
                            if (Guid.TryParse(search, out var _idPerusahaan))
                                result_where = (d => d.IdPenawaranNavigation.IdPerusahaan == _idPerusahaan);
                        }
                        else
                            result_order = (d => d.IdPenawaranNavigation.IdPerusahaan);
                        break;
                    case "perusahaan":
                        if (is_where)
                        {
                            result_where = (d => d.IdPenawaranNavigation.IdPerusahaanNavigation.NamaPerusahaan.Trim().ToLower().Contains(search));
                        }
                        else
                            result_order = (d => d.IdPenawaranNavigation.IdPerusahaanNavigation.NamaPerusahaan);
                        break;
                    case "deskripsipenawaran":
                        if (is_where)
                        {
                            result_where = (d => d.IdPenawaranNavigation.Deskripsi.Trim().ToLower().Contains(search));
                        }
                        else
                            result_order = (d => d.IdPenawaranNavigation.Deskripsi);
                        break;
                    case "idprogram":
                        if (is_where)
                        {
                            if (Guid.TryParse(search, out var _idProgram))
                                result_where = (d => d.IdProgramItemNavigation.IdProgram == _idProgram);
                        }
                        else
                            result_order = (d => d.IdProgramItemNavigation.IdProgram);
                        break;
                    case "programname":
                        if (is_where)
                        {
                            result_where = (d => d.IdProgramItemNavigation.IdProgramNavigation.NamaProgramNavigation.Name.Trim().ToLower().Contains(search));
                        }
                        else
                            result_order = (d => d.IdProgramItemNavigation.IdProgramNavigation.NamaProgram);
                        break;
                    case "idprogramitem":
                        if (is_where)
                        {
                            if (Guid.TryParse(search, out var _idProgramItem))
                                result_where = (d => d.IdProgramItem == _idProgramItem);
                        }
                        else
                            result_order = (d => d.IdProgramItem);
                        break;
                    case "programitemname":
                        if (is_where)
                        {
                            result_where = (d => d.IdProgramItemNavigation.Nama.Trim().ToLower().Contains(search));
                        }
                        else
                            result_order = (d => d.IdProgramItemNavigation.Nama);
                        break;
                    case "jumlah":
                        if (is_where)
                        {
                            if (double.TryParse(search, out var _Jumlah))
                                result_where = (d => d.Jumlah == _Jumlah);
                        }
                        else
                            result_order = (d => d.Jumlah);
                        break;
                    case "notes":
                        if (is_where)
                        {
                            result_where = (d => d.Notes.Trim().ToLower().Contains(search));
                        }
                        else
                            result_order = (d => d.Notes);
                        break;
                    case "rupiah":
                        if (is_where)
                        {
                            if (double.TryParse(search, out var _Rupiah))
                                result_where = (d => d.Rupiah == _Rupiah);
                        }
                        else
                            result_order = (d => d.Rupiah);
                        break;
                    case "status":
                        if (is_where)
                        {
                            if (int.TryParse(search, out var _Status))
                            {
                                if (_Status == 4)
                                    result_where = (d => d.Status == 2 || d.Status == 3);
                                else
                                    result_where = (d => d.Status == _Status);
                            }
                        }
                        else
                            result_order = (d => d.Status);
                        break;

                }
            }
            return (result_where, result_order);
        }
        #endregion
    }
}

