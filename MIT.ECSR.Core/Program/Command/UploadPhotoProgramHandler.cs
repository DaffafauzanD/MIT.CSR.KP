//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using WonderKid.DAL.Interface;
using System.ComponentModel.DataAnnotations;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using MIT.ECSR.Data;
using MIT.ECSR.Shared.Attributes;
using MIT.ECSR.Core.Helper;
using MIT.ECSR.Core.Request;
using MIT.ECSR.Data.Model;
using MIT.ECSR.Core.Media.Command;
using MIT.ECSR.Shared.Interface;

namespace MIT.ECSR.Core.Program.Command
{

    #region Request
    public class UploadPhotoProgramRequest : IRequest<StatusResponse>
    {
        [Required]
        public Guid Id { get; set; }
        [Required]
        public FileObject Photo { get; set; }
        [Required]
        public string Inputer { get; set; }
    }
    #endregion

    internal class UploadPhotoProgramHandler : IRequestHandler<UploadPhotoProgramRequest, StatusResponse>
    {
        private readonly ILogger _logger;
        private readonly IMediator _mediator;
        private readonly IGeneralHelper _helper;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public UploadPhotoProgramHandler(
            ILogger<UploadPhotoProgramHandler> logger,
            IMediator mediator,
            IGeneralHelper helper,
             IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mediator = mediator;
            _helper = helper;
            _context = context;
        }
        public async Task<StatusResponse> Handle(UploadPhotoProgramRequest request, CancellationToken cancellationToken)
        {
            StatusResponse result = new StatusResponse();
            try
            {
                if (!_helper.IsImage(request.Photo.Filename))
                {
                    result.BadRequest("File is not Image!");
                    return result;
                }
                var item = await _context.Entity<TrsProgram>().Where(d => d.Id == request.Id).FirstOrDefaultAsync();
                if (item != null)
                {
                    result = await _mediator.Send(new EditMediaRequest()
                    {
                        File = request.Photo,
                        Inputer = request.Inputer,
                        Modul = item.Id.ToString(),
                        Tipe = "PHOTO_PROGRAM",
                        Height = 300,
                        Width = 300
                    });
                    return result;
                }
                else
                    result.NotFound($"Id Program {request.Id} Tidak Ditemukan");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Upload Program", request);
                result.Error("Failed Upload Program", ex.Message);
            }
            return result;
        }
    }
}

