//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using WonderKid.DAL.Interface;
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;
using Microsoft.Extensions.Logging;
using MIT.ECSR.Data;
using MIT.ECSR.Data.Model;
using MIT.ECSR.Shared.Attributes;
using MIT.ECSR.Core.Response;
using MIT.ECSR.Core.Helper;
using MIT.ECSR.Core.Media.Query;
using DocumentFormat.OpenXml.Spreadsheet;

namespace MIT.ECSR.Core.Report.Query
{
    public class GetTopCompanyRequest : IRequest<ListResponse<TopCompanyResponse>>
    {
    }
    internal class GetTopCompanyHandler : IRequestHandler<GetTopCompanyRequest, ListResponse<TopCompanyResponse>>
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
        private readonly IMediator _mediator;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public GetTopCompanyHandler(
            ILogger<GetTopCompanyHandler> logger,
            IMapper mapper,
            IMediator mediator,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mapper = mapper;
            _mediator = mediator;
            _context = context;
        }

        public async Task<ListResponse<TopCompanyResponse>> Handle(GetTopCompanyRequest request, CancellationToken cancellationToken)
        {
            ListResponse<TopCompanyResponse> result = new ListResponse<TopCompanyResponse>();
            try
            {

                var data_group = await _context.Entity<TrsPenawaranItem>().Where(d => d.Status == (int)PenawaranStatusEnum.CLOSED)
                    .GroupBy(d => new
                    {
                        IdPerusahaan = d.IdPenawaranNavigation.IdPerusahaan,
                        idUser = d.IdPenawaranNavigation.IdPerusahaanNavigation.IdUser
                    })
                    .Select(d => new
                    {
                        IdPerusahaan = d.Key.IdPerusahaan,
                        IdUser = d.Key.idUser,
                        Rupiah = d.Any(d => d.Rupiah != null) ? d.Sum(d => d.Rupiah.Value) : 0,
                        Total = d.Count()
                    }).OrderByDescending(d => d.Rupiah).ThenByDescending(d => d.Total).Take(5).ToListAsync();
                if (data_group != null && data_group.Count() > 0)
                {
                    var id_perusahaan = data_group.Select(d => d.IdPerusahaan).ToList();
                    var id_user = data_group.Where(d => d.IdUser.HasValue).Select(d => d.IdUser).ToList();
                    var photos = await _mediator.Send(new GetMediaUrlListRequest() { Modul = id_user.Select(d => d.ToString()).ToList(), Tipe = "PHOTO_USER" });

                    var perusahaan = await _context.Entity<MstPerusahaan>().Where(d => id_perusahaan.Contains(d.Id)).ToListAsync();
                    result.List = new List<TopCompanyResponse>();
                    foreach (var d in perusahaan)
                    {
                        result.List.Add(new TopCompanyResponse()
                        {
                            Company = _mapper.Map<PerusahaanResponse>(d),
                            Logo = photos.Succeeded ? photos.List.Where(x => x.Modul == d.IdUser.Value.ToString()).Select(d => d.Media).FirstOrDefault() : null,
                            Rupiah = data_group.Where(x => x.IdPerusahaan == d.Id).Select(d => d.Rupiah).FirstOrDefault(),
                            Jumlah = data_group.Where(x => x.IdPerusahaan == d.Id).Select(d => d.Total).FirstOrDefault()
                        });
                    }
                    result.List = result.List.OrderByDescending(d => d.Rupiah).ToList();
                    result.Count = result.List.Count();
                    result.Filtered = result.List.Count();
                }
                result.OK();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Get Top 5 Company", request);
                result.Error("Failed Get Top 5 Company", ex.Message);
            }
            return result;
        }
    }
}

