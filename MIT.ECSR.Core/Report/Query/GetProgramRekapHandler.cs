//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using WonderKid.DAL.Interface;
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;
using Microsoft.Extensions.Logging;
using MIT.ECSR.Data;
using MIT.ECSR.Data.Model;
using MIT.ECSR.Shared.Attributes;
using MIT.ECSR.Core.Response;
using MIT.ECSR.Core.Helper;
using MIT.ECSR.Core.Media.Query;
using DocumentFormat.OpenXml.Spreadsheet;

namespace MIT.ECSR.Core.Report.Query
{
    public class GetProgramRekapRequest : IRequest<ObjectResponse<ProgramRekapResponse>>
    {
    }
    internal class GetProgramRekapHandler : IRequestHandler<GetProgramRekapRequest, ObjectResponse<ProgramRekapResponse>>
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
        private readonly IMediator _mediator;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public GetProgramRekapHandler(
            ILogger<GetProgramRekapHandler> logger,
            IMapper mapper,
            IMediator mediator,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mapper = mapper;
            _mediator = mediator;
            _context = context;
        }

        public async Task<ObjectResponse<ProgramRekapResponse>> Handle(GetProgramRekapRequest request, CancellationToken cancellationToken)
        {
            ObjectResponse<ProgramRekapResponse> result = new ObjectResponse<ProgramRekapResponse>();
            try
            {
                List<int> status = new List<int>() { (int)ProgramStatusEnum.ON_PROGRESS, (int)ProgramStatusEnum.CLOSED };
                var data_group = await _context.Entity<TrsProgramItem>().Where(d => status.Contains(d.IdProgramNavigation.Status))
                    .GroupBy(d => d.IdProgramNavigation.Status)
                    .Select(d => new
                    {
                        Status = d.Key,
                        Count = d.Count(),
                        Rupiah = d.Sum(a => a.Rupiah)
                    }).ToListAsync();
                result.Data = new ProgramRekapResponse()
                {
                    Done = data_group.Where(d => d.Status == (int)ProgramStatusEnum.CLOSED).Select(d => d.Count).FirstOrDefault(),
                    DoneRupiah = data_group.Where(d => d.Status == (int)ProgramStatusEnum.CLOSED).Select(d => d.Rupiah).FirstOrDefault(),
                    OnProgress = data_group.Where(d => d.Status == (int)ProgramStatusEnum.ON_PROGRESS).Select(d => d.Count).FirstOrDefault(),
                    OnProgressRupiah = data_group.Where(d => d.Status == (int)ProgramStatusEnum.ON_PROGRESS).Select(d => d.Rupiah).FirstOrDefault(),
                };
                result.OK();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Get Rekap", request);
                result.Error("Failed Get Rekap", ex.Message);
            }
            return result;
        }
    }
}

